package frc.robot.commands;

import java.io.File;
import java.io.IOException;

import edu.wpi.first.math.trajectory.Trajectory;
import edu.wpi.first.math.trajectory.TrajectoryUtil;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Filesystem;
import frc.robot.subsystems.Chassis;

/**
 * Command that drives the robot through a path generated by PathWeaver.
 * Path files will be in the <tt>deploy/paths/output</tt> directory.
 */
public class ChassisPathWeaverCommand extends AbstractTrajectoryCommand {

  private final String pathFileName;

  /**
   * Construct the ChassisWaypointCommand.
   * 
   * @param pathFileName File name under <tt>deploy/paths/output</tt>.
   * @param chassis      The {@link Chassis} subsystem.
   */
  public ChassisPathWeaverCommand(String pathFileName, Chassis chassis) {
    super(chassis);
    this.pathFileName = pathFileName;
    this.trajectory = generateTrajectory();
  }

  @Override
  protected Trajectory generateTrajectory() {
    return readPathweaverFile(this.pathFileName);
  }

  /**
   * Read a {@code Trajectory} from a JSON file. Throws an irrecoverable error if
   * there is any problem reading the file.
   * 
   * @param pathFileName
   * @return the new {@code Trajectory}.
   */
  private Trajectory readPathweaverFile(String pathFileName) {
    File pathFile = null;
    try {
      File pathDirectory = new File(new File(Filesystem.getDeployDirectory(), "paths"), "output");
      pathFile = new File(pathDirectory, pathFileName);
      return TrajectoryUtil.fromPathweaverJson(pathFile.toPath());
    } catch (IOException ex) {
      final String errorMessage = "Unable to open trajectory: " + pathFile;
      DriverStation.reportError(errorMessage, ex.getStackTrace());
      throw new RuntimeException(errorMessage, ex);
    }
  }
}
